// Generated by CoffeeScript 1.8.0
  var BackgroundLayer, Detect, Errors, Layer, Utils, ease, easeIn, easeInOut, easeOut, easeReverse, idArray, linear, screen;

  require(['./js/jquery.min'], function(dependency) {});

  require(['./js/velocity.min'], function(dependency) {});

  $(window).resize(function() {
    return location.reload();
  });

  Errors = {
    sameID: 'Two div have the same id! Change the name in the layer declaration.',
    wrongCenterValue: 'You inserted a wrong value for the center properties. Please check it. The only possibilities are: x, y, both.',
    wrongVisibleValue: 'Please insert in layers declaration the visible property for correctness.'
  };

  Detect = {};

  Utils = {};

  Utils.deviceType = function() {
    if (/(mobi)/i.test(navigator.userAgent)) {
      return "phone";
    }
    if (/(tablet)|(iPad)/i.test(navigator.userAgent)) {
      return "tablet";
    }
    return "desktop";
  };

  Detect.isChrome = function() {
    return /chrom(e|ium)/.test(navigator.userAgent.toLowerCase());
  };

  Detect.isSafari = function() {
    return /safari/.test(navigator.userAgent.toLowerCase());
  };

  Detect.isTouch = function() {
    return window.ontouchstart === null;
  };

  Detect.isDesktop = function() {
    return Utils.deviceType() === "desktop";
  };

  Detect.isPhone = function() {
    return Utils.deviceType() === "phone";
  };

  Detect.isTablet = function() {
    return Utils.deviceType() === "tablet";
  };

  if (Detect.isChrome()) {
    console.log('Using Chorme');
  }

  if (Detect.isSafari()) {
    console.log('Using Safari');
  }

  if (Detect.isTouch()) {
    console.log('Using Touch device');
  }

  if (Detect.isDesktop()) {
    console.log('Using Desktop browser');
  }

  if (Detect.isPhone()) {
    console.log('Using Phone');
  }

  if (Detect.isTablet()) {
    console.log('Using Tablet');
  }

  screen = {};

  screen.width = $(window).width();

  screen.height = $(window).height();

  linear = [0, 0, 1, 1];

  ease = [.25, .1, .25, 1];

  easeIn = [.42, 0, 1, 1];

  easeOut = [0, 0, .58, 1];

  easeInOut = [.42, 0, .58, 1];

  easeReverse = [0, .99, 1, .01];

  idArray = [];

  Layer = (function() {
    Layer.properties = {
      width: Layer.width,
      height: Layer.height,
      backgroundColor: Layer.backgroundColor,
      position: Layer.position,
      x: Layer.x,
      y: Layer.y,
      z: Layer.z,
      borderRadius: Layer.borderRadius,
      boxShadow: Layer.boxShadow,
      center: Layer.center,
      image: Layer.image,
      visible: Layer.visible,
      opacity: Layer.opacity,
      scale: Layer.scale
    };

    function Layer(name, properties) {
      var centerX, centerY, heightInt, i, screenHeight, screenWidth, tempId, widthInt, _i, _ref;
      this.name = name;
      this.properties = properties;
      window.newDiv = document.createElement('div');
      document.body.appendChild(newDiv);
      newDiv.id = name;
      tempId = name;
      for (i = _i = 0, _ref = idArray.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (tempId === idArray[i]) {
          console.error(Errors.sameID);
          document.getElementById('error').style.visibility = 'visible';
        }
      }
      idArray.push(tempId);
      console.log(idArray);
      newDiv.style.width = this.properties.width.toString() + 'px';
      newDiv.style.height = this.properties.height.toString() + 'px';
      newDiv.style.backgroundColor = this.properties.backgroundColor;
      newDiv.style.position = 'absolute';
      if (this.properties.center === 'both') {
        screenWidth = $(window).width();
        screenHeight = $(window).height();
        widthInt = parseInt(this.properties.width);
        heightInt = parseInt(this.properties.height);
        centerX = (screenWidth - widthInt) / 2;
        centerY = (screenHeight - heightInt) / 2;
        newDiv.style.position = 'absolute';
        newDiv.style.left = centerX + 'px';
        newDiv.style.top = centerY + 'px';
      } else if (this.properties.center === 'x') {
        screenWidth = $(window).width();
        widthInt = parseInt(this.properties.width);
        centerX = (screenWidth - widthInt) / 2;
        newDiv.style.position = 'absolute';
        newDiv.style.left = centerX + 'px';
        newDiv.style.top = this.properties.y + 'px';
      } else if (this.properties.center === 'y') {
        screenWidth = $(window).height();
        heightInt = parseInt(this.properties.height);
        centerY = (screenWidth - heightInt) / 2;
        newDiv.style.position = 'absolute';
        newDiv.style.top = centerY + 'px';
        newDiv.style.left = this.properties.x + 'px';
      } else {
        newDiv.style.left = this.properties.x + 'px';
        newDiv.style.top = this.properties.y + 'px';
      }
      newDiv.style.zIndex = this.properties.z + 'px';
      newDiv.style.borderRadius = this.properties.borderRadius + 'px';
      newDiv.style.boxShadow = this.properties.boxShadow;
      newDiv.style.backgroundImage = 'url(' + this.properties.image + ')';
      if (this.properties.visible === true) {
        newDiv.style.visibility = 'visible';
      }
      if (this.properties.visible === false) {
        newDiv.style.visibility = 'hidden';
      }
      if (this.properties.visible !== true && this.properties.visible !== false) {
        console.warn(Errors.wrongVisibleValue);
      }
      newDiv.style.opacity = this.properties.opacity;
      newDiv.style.transform = 'scale(' + this.properties.scale + ')';
    }

    Layer.prototype.animate = function(event, x, time, curve) {
      switch (event) {
        case 'opacity':
          $('#' + this.name).velocity({
            opacity: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'top':
          $('#' + this.name).velocity({
            top: x + 'px'
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'bottom':
          $('#' + this.name).velocity({
            bottom: x + 'px'
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'x':
          $('#' + this.name).velocity({
            left: x + 'px'
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'y':
          $('#' + this.name).velocity({
            right: x + 'px'
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'translateX':
          $('#' + this.name).velocity({
            translateX: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'translateY':
          $('#' + this.name).velocity({
            translateY: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'rotateZ':
          $('#' + this.name).velocity({
            rotateZ: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'rotateX':
          $('#' + this.name).velocity({
            rotateX: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'rotateY':
          $('#' + this.name).velocity({
            rotateY: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'width':
          $('#' + this.name).velocity({
            width: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'height':
          $('#' + this.name).velocity({
            height: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'backgroundColor':
          $('#' + this.name).velocity({
            backgroundColor: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'borderRadius':
          $('#' + this.name).velocity({
            borderRadius: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'boxShadow':
          $('#' + this.name).velocity({
            boxShadow: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
        case 'scale':
          $('#' + this.name).velocity({
            scale: x
          }, time, curve);
          return console.log('Velocity Event: ' + event);
      }
    };

    Layer.prototype.edit = function(properties) {
      var centerX, centerY, child, heightInt, screenHeight, screenWidth, widthInt;
      this.properties = properties;
      child = document.getElementById(this.name);
      child.style.width = this.properties.width + 'px';
      child.style.height = this.properties.height + 'px';
      child.style.backgroundColor = this.properties.backgroundColor;
      child.style.position = this.properties.position;
      if (this.properties.center === 'both') {
        screenWidth = $(window).width();
        screenHeight = $(window).height();
        widthInt = parseInt(this.properties.width);
        heightInt = parseInt(this.properties.height);
        centerX = (screenWidth - widthInt) / 2;
        centerY = (screenHeight - heightInt) / 2;
        child.style.position = 'absolute';
        child.style.left = centerX + 'px';
        child.style.top = centerY + 'px';
      } else if (this.properties.center === 'x') {
        screenWidth = $(window).width();
        widthInt = parseInt(this.properties.width);
        centerX = (screenWidth - widthInt) / 2;
        child.style.position = 'absolute';
        child.style.left = centerX + 'px';
        child.style.top = this.properties.y + 'px';
      } else if (this.properties.center === 'y') {
        screenWidth = $(window).height();
        heightInt = parseInt(this.properties.height);
        centerY = (screenWidth - heightInt) / 2;
        child.style.position = 'absolute';
        child.style.top = centerY + 'px';
        child.style.left = this.properties.x + 'px';
      } else {
        child.style.left = this.properties.x + 'px';
        child.style.top = this.properties.y + 'px';
      }
      child.style.zIndex = this.properties.z + 'px';
      child.style.borderRadius = this.properties.borderRadius + 'px';
      child.style.boxShadow = this.properties.boxShadow;
      child.style.backgroundImage = 'url(' + this.properties.image + ')';
      if (this.properties.visible === true) {
        child.style.visibility = 'visible';
      }
      if (this.properties.visible === false) {
        child.style.visibility = 'hidden';
      }
      if (this.properties.visible !== true && this.properties.visible !== false) {
        console.warn(Errors.wrongVisibleValue);
      }
      child.style.opacity = this.properties.opacity;
      return child.style.transform = 'scale(' + this.properties.scale + ')';
    };

    Layer.prototype["delete"] = function() {
      return document.getElementById(this.name).style.visibility = 'hidden';
    };

    Layer.prototype.superLayer = function(parent) {
      var child, parentID;
      parentID = document.getElementById('' + parent.toString());
      $(parentID).append($('#' + this.name));
      child = document.getElementById('' + this.name);
      return child.style.position = 'relative';
    };

    return Layer;

  })();

  BackgroundLayer = (function() {
    BackgroundLayer.properties = {
      backgroundColor: BackgroundLayer.backgroundColor,
      image: BackgroundLayer.image
    };

    function BackgroundLayer(properties) {
      var body;
      this.properties = properties;
      body = document.getElementsByTagName('body')[0];
      body.style.backgroundColor = this.properties.backgroundColor;
      body.style.backgroundImage = 'url(' + this.properties.image + ')';
    }

    return BackgroundLayer;

  })();
